#+title: Emacs Configuration
#+startup: content hideblocks
#+property: header-args :tangle (locate-user-emacs-file "emacs.el") :results silent
#+property: org-babel-default-header-args :tangle yes
* Init file
#+include: "~/dotfiles/emacs/.emacs.d/init.el" src emacs-lisp
** [[https://github.com/jwiegley/use-package#getting-started][Use Package Help]]
** Print startup time
#+begin_src emacs-lisp
	;; or alternatively use emacs-init-time function
	(defun fc/print-startup-time ()
		(message "Emacs loaded in %s seconds with %d garbage collection" (emacs-init-time "%.02f") gcs-done))
	(add-hook 'emacs-startup-hook #'fc/print-startup-time)
#+end_src
** Remapped keys
#+begin_src emacs-lisp
	(defvar remapped-keys nil
		"List of remapped keys from the global-map")

	(defun global-remap-key (keys defn)
		(when-let ((old (keymap-lookup global-map keys)))
			(add-to-list 'remapped-keys
								 (cons keys old)))
		(define-key global-map (kbd keys) defn))
#+end_src
* Interface Tweaks
** Use y/p instead of yes/no
#+begin_src emacs-lisp
	(if (version< emacs-version "28.1")
			(defalias 'yes-or-no-p 'y-or-n-p "Use y/n instead of yes/no")
		(setq use-short-answers t))
#+end_src
** Use utf-8 encoding everywhere
#+begin_src emacs-lisp
	;; set default encoding for all files
	(set-language-environment "UTF-8")
	(set-default-coding-systems 'utf-8)
	;(set-buffer-file-coding-system 'utf-8-unix)
#+end_src
** UI tweaks
- From [[https://stackoverflow.com/questions/6068819/alias-to-make-emacs-open-a-file-in-a-new-buffer-not-frame-and-be-activated-com][Do not allow new buffer frames]]
#+begin_src emacs-lisp
	(tool-bar-mode -1)				; hide toolbar
	(menu-bar-mode t)					; show menubar
	(scroll-bar-mode -1)			; hide scrollbar
	(electric-pair-mode t)		; auto-close parenthesis everywhere
	(desktop-save-mode t)			; save all emacs buffers

	(setq
	 inhibit-startup-screen t	; do not show startup screen
	 size-indication-mode t		; show human readable file size in modeline
	 column-number-mode t			; show column numbers
	 ns-pop-up-frames nil			; do not allow new frames
	 pop-up-frames nil				; do not allow new frames
	 global-hl-line-mode nil	; do not highlight current line
	 savehist-mode 1					; persist minibuffer history across sessions
	 save-place-mode 1				; save the place when last visited
	 view-read-only t					; use view-mode for readonly buffers
	 use-dialog-box nil				; disable using dialog boxes
	 )
#+end_src
*** System specific
#+begin_src emacs-lisp
	(pcase system-type
		(darwin
		 (setq dired-use-ls-dired nil)))		; do not pass --dired flag to ls
#+end_src
** Flash modeline instead of visble bell
#+begin_src emacs-lisp
	;; flash mode line instead of beeping
	(setq visible-bell nil
				ring-bell-function 'fc/flash-mode-line)
	(defun fc/flash-mode-line ()
		(invert-face 'mode-line)
		(run-with-timer 0.1 nil #'invert-face 'mode-line))
#+end_src
*** +Disable Completely+
#+begin_example emacs-lisp
	(setq ring-bell-function 'ignore)
#+end_example
** Replace BufferMenu with ibuffer
#+begin_src emacs-lisp
	;; user `ibuffer' for buffer listing
	(global-remap-key "C-x C-b" #'ibuffer)
;	(global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src
** +Replace dabbrev expand with hippie-expand+
#+begin_example emacs-lisp
	(global-remap-key "M-/" #'hippie-expand)
#+end_example
** Use fido vertical mode
#+begin_src emacs-lisp
	;; list of available styles `completion-styles-alist'
	(setq  completion-styles '(basic partial-completion emacs22 initials flex))
	;; enable ido completions
	(fido-vertical-mode 1)
	;; non-contiguos chars matching
	;(setq ido-enable-flex-matching t)
#+end_src
** Set calendar options
#+begin_src emacs-lisp
	(calendar-set-date-style 'iso)
	;; use yyyy-MM-dd and mark diary entries
	(setq calendar-date-style 'iso
				calendar-mark-diary-entries-flag t
				calendar-mark-holidays-flag t
				diary-file "~/.emacs.d/diary"
				)

	;; disable all other calendar holidays
	(setq holiday-bahai-holidays			nil
				holiday-christian-holidays	nil
				holiday-general-holidays		nil
				holiday-hebrew-holidays			nil
				holiday-islamic-holidays		nil
				holiday-local-holidays			nil
				holiday-oriental-holidays		nil
				holiday-solar-holidays			nil)

	;; load work holidays
	(load-file (locate-user-emacs-file "work-holidays.el"))
	;; list of holidays filter by if calendar is visible
	(defun fc/filtered-holidays (holidays)
		"Returns a list of HOLIDAYS that ar within the visible calendar range"
			(seq-filter (lambda (x) (calendar-date-is-visible-p (car x))) holidays)
			)


	;; set displayable holidays
	(setq holiday-local-holidays
				'((holiday-fixed 1 1 "New Years Day")
					(holiday-fixed 1 26 "Republic Day")
					(holiday-fixed 5 1 "May Day")
					(holiday-fixed 8 15 "Independence Day")
					(holiday-fixed 10 2 "Gandhi Jayanthi")
					(holiday-fixed 11 1 "Karnataka Rajyotsava")
					(holiday-fixed 12 25 "Christmas")
					(fc/filtered-holidays work-holidays-2017)
					(fc/filtered-holidays work-holidays-2018)
					(fc/filtered-holidays work-holidays-2019)
					(fc/filtered-holidays work-holidays-2020)
					(fc/filtered-holidays work-holidays-2022)
					(fc/filtered-holidays work-holidays-2023)
					))
#+end_src
** Open emacs sources in readonly view mode
#+begin_src emacs-lisp
	(defun fc/eldoc-readonly ()
		"When browsing gzipped elisp files mark them as readonly"
		(when
				(and
				 (buffer-file-name)
				 (string-suffix-p ".el.gz" (file-name-nondirectory buffer-file-name))
				 (not buffer-read-only))

			(read-only-mode t)
			(view-mode t)
			(message "read-only view mode enabled")))

	(add-hook 'emacs-lisp-mode-hook #'fc/eldoc-readonly)
#+end_src
** Remove trailing whitespace
#+begin_src emacs-lisp
	(add-hook 'before-save-hook #'delete-trailing-whitespace)
#+end_src
** imenu keybinding
#+begin_src emacs-lisp
	;; bind super-i to imenu
	(global-remap-key "s-i" #'imenu)
	;(define-key global-map (kbd "s-i") #'imenu)
#+end_src
** Hide mouse cursor while typing
#+begin_src emacs-lisp
	(setq make-pointer-invisible t)
#+end_src
** Remap compose-email to switch-to-scratch
#+begin_src emacs-lisp
	(defun switch-to-scratch ()
		(interactive)
		(switch-to-buffer "*scratch*"))
	(global-remap-key "C-x m" #'switch-to-scratch)
	;; (let ((keys "C-x m"))
	;; 	(setq old-c-x-m (keymap-lookup global-map keys))
	;; 	(define-key global-map (kbd keys) #'switch-to-scratch))
#+end_src
** Show messages buffer in other window
#+begin_src emacs-lisp
	(defun show-messages ()
		(interactive)
		(display-buffer "*Messages*" 'display-buffer-pop-up-window))
	(keymap-global-set "C-x M" #'show-messages)
#+end_src
** Remove keybinding to suspend frame
Always getting triggered by accident
#+begin_src emacs-lisp
	(dolist (keys '("C-z" "C-x C-z"))
		(global-remap-key keys nil))
#+end_src
** Display fill column indicator for prog modes
#+begin_src emacs-lisp
	(add-hook 'prog-mode-hook #'display-fill-column-indicator-mode)
	(add-hook 'git-commit-mode-hook #'display-fill-column-indicator-mode)
#+end_src
* Autosave & Backups
Change the backup directory to be inside .emacs.d so that it does
not litter directories with the backup files
#+begin_src emacs-lisp
	(setq auto-save-default nil)
	;; configure autosaves to folder
	(setq auto-save-file-name-transforms
				'(("." "~/.emacs.d/autosaves/\\1" t)))
	;; move backups to different folder
	(setq backup-directory-alist
				'((".*" . "~/.emacs.d/backups/")))
	;; do not create lockfiles
	(setq create-lockfiles nil)
	;; use trash to delete
	(setq delete-by-moving-to-trash t)
#+end_src
* +Position the Emacs frame+
Already handled by desktop?
** Find current coordinates
1. Position the emacs window in the bottom right
2. Find out the current width and height using =(frame-width)= & =(frame-height)= functions
3. Find out the current position using =(frame-parameters (selected-frame))=
#+begin_example emacs-lisp
	(defun fc/emacs-frame-size-plist ()
		(list
		 :top (frame-parameter (selected-frame) 'top)
		 :left (frame-parameter (selected-frame) 'left)
		 :width  (frame-width)
		 :height  (frame-height))
		)
#+end_example
** +Set the current position+
#+begin_example emacs-lisp
	(setq default-frame-alist
				'((top . 34) (left . 646) (width . 110) (height . 50)))
#+end_example
* Initialize Local configurations
#+begin_src emacs-lisp
	;; define functions used in init-local
	(defun fc/add-to-path (paths)
		"Returns a new `PATH' string with unique items fromt PATHS from
	the environment variable `PATH'"
		(let ((ps (split-string (getenv "PATH") ":")))
			(string-join (seq-uniq (append ps paths)) ":")))

	(add-to-list 'load-path (locate-user-emacs-file "lisp"))
	;; load
	(require 'init-local)
#+end_src
* GNU/MELPA Packages
** Try
#+begin_src emacs-lisp
	(use-package try
		:ensure t)
#+end_src
** Diminish
#+begin_src emacs-lisp
	(use-package diminish
		:ensure t)
#+end_src
** +Set exec-path from shell+
Causes LC_ENCODING issues with projectile-find-file
#+begin_example
	(use-package exec-path-from-shell
		:ensure t
		:config
		(exec-path-from-shell-initialize))
#+end_example
*** Set path manually
#+begin_src emacs-lisp
	(setenv "PATH"
					(concat
					 (getenv "PATH")
					 ":" (getenv "HOME") "/go/bin"
					 ":" (getenv "HOME") "/.cargo/bin"
					 ":/usr/local/bin"))
#+end_src
** Which Key
#+begin_src emacs-lisp
	(use-package which-key
		:ensure t
		:diminish
		:config
		(which-key-mode))
#+end_src
** Dockerfile
#+begin_src emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+end_src
** +Autocomplete+
#+begin_example emacs-lisp
	(use-package auto-complete
		:ensure t
		:diminish
		:init
		(ac-config-default)									; enables global-auto-complete-mode
		)
#+end_example
** Web Mode
#+begin_src emacs-lisp
	(defun setup-compile-html ()
		(when (buffer-file-name)
			(setq-local compile-command (concat "vnu " (file-name-nondirectory (buffer-file-name))))))
	;; install vnu from brew

	(use-package web-mode
		:mode "\\.\\(?:aspx?\\|djhtml\\|erb\\|h\\(?:bs\\|tml\\)\\|jsp\\|mustache\\|phtml\\|tpl\\.php\\)\\'"
		:custom
		(web-mode-enable-current-element-highlight t "Highlight current tag")
		:hook setup-compile-html
		:ensure t)
#+end_src
** Emmet
#+begin_src emacs-lisp
	(use-package emmet-mode
		:ensure t
		:hook (sgml-mode html-mode web-mode))
#+end_src
** JSON
Depends on [[https://github.com/ljos/jq-mode][JQ Mode]]
#+begin_src emacs-lisp
	(use-package json-mode
		:mode "\\.\\(\\(babel\\|bower\\)rc\\|json\\)\\'"
		:ensure t
		:bind (:map json-mode-map
			 ("C-c C-j" . 'jq-interactively))
		:custom
		(tab-width 2)
		)
#+end_src
** Go
https://geeksocket.in/posts/emacs-lsp-go/
#+begin_src emacs-lisp
	;; Go - lsp-mode
	;; Set up before-save hooks to format buffer and add/delete imports.
	(use-package go-mode
		:ensure t
		:config
		(add-hook 'before-save-hook #'gofmt-before-save)
		:custom
		(tab-width 2))
	;;  (add-hook 'before-save-hook #'gofmt-before-save))
#+end_src
** Mermaid
Ensure that the NPM package =mermaid.cli= is installed globally
#+begin_src emacs-lisp
  (use-package mermaid-mode
    :ensure t
    :custom
    (mermaid-mmdc-location "/usr/bin/env mmdc")
    (mermaid-output-format ".png")
  )
#+end_src
** Yaml
#+begin_src emacs-lisp
	(use-package yaml-mode
		:ensure t
		:hook whitespace-mode
		:config
		(setq indent-tabs-mode nil)
		)
#+end_src
** Markdown
Ensure that =[[https://gitlab.com/golang-commonmark/mdtool][mdtool]]= is installed via go get
#+begin_src sh :tangle no
  go get -u gitlab.com/golang-commonmark/mdtool
#+end_src
#+begin_src emacs-lisp
	(use-package markdown-mode
		:ensure t
		:custom
		(markdown-command "~/go/bin/mdtool +h +ta +l")
		)
#+end_src
*** Edit indirect for editing code blocks (Still need to figure out how it works)
#+begin_src emacs-lisp
	(use-package edit-indirect
		:ensure t)
#+end_src
** Asciidoc
#+begin_src emacs-lisp
	(use-package adoc-mode
		:ensure t
		:init
		(add-to-list 'auto-mode-alist '("\\.adoc$" . adoc-mode)))
#+end_src
** Cypher
#+begin_src emacs-lisp
	(use-package cypher-mode
		:ensure t)
#+end_src
** Terraform
#+begin_src emacs-lisp
  (use-package terraform-mode
    :ensure t
    :init
    (add-hook 'terraform-mode-hook #'terraform-format-on-save-mode))
#+end_src
** Groovy
#+begin_src emacs-lisp
	(use-package groovy-mode
		:mode "\\(^Jenkinsfile|\\.groovy\\)\\'"
		:ensure t)
#+end_src
** vlf
#+begin_src emacs-lisp
	(use-package vlf
		:ensure t
		:config
		(require 'vlf-setup))
#+end_src
** CSV
#+begin_src emacs-lisp
	(use-package csv-mode
		:ensure t)

	(defun csv-open-in-excel ()
		"Open csv in MS Excel in Mac"
		(interactive)
		(let ((fn (if (buffer-file-name)
									(buffer-file-name)
								(make-temp-file "csv" nil ".csv" (buffer-string))))
					(cmd '("open" "-a" "\"Microsoft Excel.app\"" "--args")))
			(add-to-list 'cmd fn t)
			(compilation-start (string-join cmd " "))))
	;; add keybinding
	(define-key csv-mode-map (kbd "C-c C-o") #'csv-open-in-excel)
#+end_src
** Kotlin
#+begin_src emacs-lisp
  (use-package kotlin-mode
    :ensure t)
#+end_src
** CQL Mode
#+begin_src emacs-lisp
  (use-package cql-mode
    :ensure t)
#+end_src
** Powershell
#+begin_src emacs-lisp
  (use-package powershell
    :ensure t)
#+end_src
** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :ensure t)
#+end_src
** Web Sequence Diagrams
#+begin_src emacs-lisp
  (use-package wsd-mode
    :ensure t)
#+end_src
** [[https://github.com/ljos/jq-mode][JQ Mode]]
#+begin_src emacs-lisp
  (use-package jq-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.jq" . jq-mode))
    :custom
    (jq-interactive-command "/usr/local/bin/jq")
    )
#+end_src
** [[https://github.com/pashky/restclient.el][REST Client]]
*** +From package repository+
#+begin_example emacs-lisp
  (use-package restclient
    :ensure t)
#+end_example
*** Latest from source to support jq
Requires [[JQ Mode]]
#+begin_src emacs-lisp
   (add-to-list
    'load-path
    (expand-file-name "~/.emacs.d/site-lisp/restclient"))
   (require 'restclient)
   (require 'restclient-jq)
#+end_src
** Ditaa
#+begin_src emacs-lisp
	;; this line activates ditaa for org mode
	(eval-after-load 'org
		(progn
			(org-babel-do-load-languages
			 'org-babel-load-languages
			 '((ditaa . t)))
			(setq org-ditaa-jar-path "/usr/local/opt/ditaa/libexec/ditaa-0.11.0-standalone.jar")
			(setq org-babel-default-header-args:ditaa
						'((:results . "file")
							(:exports . "results")
							(:java . "-Dfile.encoding=UTF-8 -Djava.awt.headless=true")))
			(message "Configured org babel")
			))
#+end_src
** JSX Support
#+begin_src emacs-lisp
  (use-package rjsx-mode
    :ensure t)
  (add-to-list 'auto-mode-alist '("\.tsx\\'" . rjsx-mode))
  (add-to-list 'auto-mode-alist '("\.jsx\\'" . rjsx-mode))
#+end_src
** Rust
#+begin_src emacs-lisp
  (use-package rust-mode
    :ensure t)
#+end_src
** +LSP+
Check if executable is in the path `(executable-find "gopls")`
#+begin_example emacs-lisp
	(defun fc/lsp-deferred ()
			"When enabling lsp-mode disable auto-complete"
		(auto-complete-mode -1)
		(lsp-deferred))

	(use-package lsp-mode
		:ensure t
		:config
		(setq lsp-log-io nil) ; only enable for debugging
		(add-hook 'go-mode-hook #'fc/lsp-deferred)
		(add-hook 'js-mode-hook #'fc/lsp-deferred)
		(add-hook 'css-mode-hook #'fc/lsp-deferred)
		(add-hook 'html-mode-hook #'fc/lsp-deferred)
		(setq lsp-rust-rls-server-command (concat (getenv "HOME") "/.cargo/bin/rust-analyzer"))
		(add-hook 'rust-mode-hook #'fc/lsp-deferred)
		)
	(use-package lsp-ui
		:ensure t)
#+end_example
** +Company for text completion+
#+begin_example emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1))
#+end_example
** [[https://github.com/hakimel/reveal.js][Reveal.js]] & [[https://github.com/yjwen/org-reveal][ox-reveal]]
#+begin_src emacs-lisp
	(use-package ox-reveal
		:ensure t
		:config
		(setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"))

	; htmlize dependency
	(use-package htmlize
		:ensure t)
#+end_src
** Rego
#+begin_src emacs-lisp
	(use-package rego-mode
		:ensure t)
#+end_src
** Rainbow colors
#+begin_src emacs-lisp
	;; use `M-x rainbow-mode' to fontify colors
	(use-package rainbow-mode
		:ensure t
		:init (rainbow-mode))
#+end_src
** Hydra
#+begin_src emacs-lisp
	(use-package hydra
		:ensure t)
#+end_src
*** Setup functions used by the hydra
#+begin_src emacs-lisp

	(defun fc/remove-prefix (name)
		(replace-regexp-in-string
		 (rx-to-string `(: line-start ,projects-home "/") t)
		 ""
		 name))

	(defun fc/make-pair (path)
		"create a pair with the directory name & filename"
		(cons (file-name-nondirectory path) path))

	;; build list of projects and org files
	(defvar project-notes nil
		"Variable to hold org project notes as a list of pairs of the form (`basename' . `full-path') ")

	(defvar project-notes-hook nil
		"Hook for running things after `project-notes' has been loaded")

	(defun load-project-notes ()
		(setq project-notes
					(seq-map
					 #'fc/make-pair
					 (seq-map #'fc/remove-prefix
										(directory-files-recursively projects-home  "-notes\\.org$"))))
		(message "Loaded %d project notes" (length project-notes))
		(run-hooks 'project-notes-hook))

	(run-with-idle-timer 1 nil #'load-project-notes)
	;; sort ?
	;(setq project-notes (seq-sort-by #'car #'string< project-notes))

	(defun fc/daily-notes-matcher (path)
		"Match daily notes files"
		(and (string-prefix-p (concat macbook-home "/daily-log-") path) (string-suffix-p ".org" path)))
	(defun fc/daily-make-pair (path)
		"Create a pair with the year & filename"
		(cons (replace-regexp-in-string "daily-log-" "" (file-name-base path)) path))
	;; build list of daily notes
	(setq daily-notes
				(seq-map #'fc/daily-make-pair
								 (directory-files macbook-home nil "daily-log-[[:digit:]]\\{4\\}\\.org$")
								 ))

	(defun fc/find-project-notes ()
		"Select a project from `project-notes' and open it"
		(interactive "i")
		(let ((proj (assoc
								 (completing-read "Select project: " (seq-map #'car project-notes))
								 project-notes)))
			(when proj
				(find-file (expand-file-name (cdr proj) projects-home)))
			)
		)

	(defun fc/find-daily-notes ()
		"Select a year from `daily-notes' and open it"
		(interactive "i")
		(let ((year (assoc
								 (completing-read "Select year: " (seq-map #'car daily-notes))
								 daily-notes)))
			(when year
				(find-file (expand-file-name (cdr year) macbook-home)))
			)
		)
#+end_src
*** Setup common paths
#+begin_src emacs-lisp
	(defvar dotfiles-home nil
		"Full path to the dotfiles repository")
	(defvar macbook-home nil
		"Full path to the directory holding all daily notes")
	(defvar projects-home nil
		"Full path to the top-level directory under which all project directories are present")
#+end_src
*** Commonly used org files
#+begin_src emacs-lisp
	(global-unset-key (kbd "s-g"))
	(defhydra common-org-files (:exit t)
		"goto"
		("a" (find-file (expand-file-name "../profile/asset.org" macbook-home)) "asset.org")
		("b" (find-file (expand-file-name "buf.org" macbook-home)) "buf.org")
		("B" (find-file (expand-file-name "dashboard/dashboard.org" dotfiles-home)) "dashboard.org")
		("d" (find-file (expand-file-name (format-time-string "daily-log-%Y.org") macbook-home)) "daily-log-2024.org")
		("D" (fc/find-daily-notes) "Daily Notes")
		("e" (find-file (expand-file-name "emacs/.emacs.d/emacs.org" dotfiles-home)) "emacs.org")
		("i" (find-file (expand-file-name "emacs/.emacs.d/init.el" dotfiles-home)) "init.el")
		("t" (find-file (expand-file-name "today.org" macbook-home)) "today.org")
		("l" (find-file (expand-file-name "laptop-config.org" macbook-home)) "laptop-config.org")
		("P" (fc/find-project-notes) "Projects")
		("q" nil "quit")
		)
	(global-remap-key "s-g" #'common-org-files/body)
	;(global-set-key (kbd "s-g") #'common-org-files/body)
#+end_src
** ace-window
#+begin_src emacs-lisp
	(use-package ace-window
		:bind ("C-x o" . ace-window)
		:custom
		(aw-dispatch-always nil))
#+end_src
** eglot
#+begin_src emacs-lisp
	(use-package eglot
		:ensure t)
#+end_src
** Avy
#+begin_src emacs-lisp
		;;	(define-key global-map (kbd "s-l") nil)
		(use-package avy
			:bind
			("M-g l" . avy-goto-line)
			("M-g f" . avy-goto-char-timer)
			("C-x j" . avy-goto-char-timer))
#+end_src
** Golden Ratio
#+begin_src emacs-lisp
	;; add advice so that golden ratio is called
	(use-package golden-ratio
		:ensure t
		:diminish
		:init
		(golden-ratio-mode 1)
		(define-advice select-window
				(:after (window &optional no-record) golden-ratio-resize-window)
			(golden-ratio)
			nil)
		)
#+end_src
** Paredit
Some examples of paredit usage [[http://danmidwood.com/content/2014/11/21/animated-paredit.html][The Animated Guide to Paredit]]
#+begin_src emacs-lisp
	(use-package paredit
		:ensure t
		:hook	(emacs-lisp-mode . paredit-mode)
		:config
		(define-key paredit-mode-map (kbd "C-j") nil t)
		(define-key paredit-mode-map (kbd "M-s") nil t)
		(define-key paredit-mode-map (kbd "M-?") nil t) ; rebind convolute
		(define-key paredit-mode-map (kbd "C-M-?") #'paredit-convolute-sexp))
#+end_src
* Packages not in ELPA/MELPA
** +Fix ~load-path~+
Add top-level directories under ~site-lisp~ to ~load-path~
#+begin_example emacs-lisp
	(let* ((default-directory user-emacs-directory)
				(parent-mapper (lambda (x) (expand-file-name x "site-lisp")))
				(dotfile-filter (lambda (x) (not (or (equal "." x) (equal ".." x)))))
				(dirs (seq-filter dotfile-filter (directory-files (locate-user-emacs-file "site-lisp")))))
		;; add specified directories only
		(normal-top-level-add-to-load-path (seq-map parent-mapper dirs))
		)
#+end_example
** Visual Basic Mode
From https://www.emacswiki.org/emacs/VisualBasicMode - [[https://github.com/emacsmirror/emacswiki.org/blob/master/visual-basic-mode.el][visual-basic-mode.el]]
#+begin_src emacs-lisp
	(use-package visual-basic-mode
		:mode "\\.vbs\\'"
		:load-path "site-lisp/visual-basic-mode"
		)
#+end_src
*** Old way
#+begin_example emacs-lisp
	(add-to-list 'load-path
							 (expand-file-name "~/.emacs.d/site-lisp/visual-basic-mode"))
	(require 'visual-basic-mode)
#+end_example
** +Drools+
From https://github.com/pdorrell/rules-editing-mode.git
#+begin_src emacs-lisp
	(add-to-list
	 'load-path
	 (expand-file-name "site-lisp/drools-mode" user-emacs-directory))
	(defun fc/init-drools-mode ()
		(setq
		 drools-tab-indent 2
		 indent-tabs-mode nil))
	(defun fc/setup-drools-mode ()
		(add-to-list 'auto-mode-alist '("\\.drl\\'" . drools-mode))
		(add-hook 'drools-mode-hook #'fc/init-drools-mode)
		)
	(require 'drools-mode)
	(eval-after-load "drools-mode"
		#'fc/setup-drools-mode)
#+end_src
** [[https://github.com/holistics/dbml][DBML]]
From https://github.com/ccod/dbd-mode
#+begin_src emacs-lisp
	(use-package dbdiagram-mode
		:load-path "site-lisp/dbdiagram-mode")
#+end_src
*** Old way
#+begin_example emacs-lisp
	(load-file (locate-user-emacs-file "site-lisp/dbdiagram-mode/dbdiagram-mode.el"))
#+end_example
** gedcom
From https://github.com/emacsattic/gedcom
#+begin_src emacs-lisp
	(use-package gedcom
		:mode ("\\.ged\\'" . gedcom-mode)
		:custom
		(gedcom-startup-message nil)
		:load-path "site-lisp/gedcom")
#+end_src
*** Old way
#+begin_example emacs-lisp
	(load-file (locate-user-emacs-file "site-lisp/gedcom/gedcom.el"))
#+end_example
** Plantuml
#+begin_src emacs-lisp
	(use-package plantuml-mode
		:load-path "site-lisp/simple-plantuml-mode"
		:custom
		(plantuml-executable-path "/usr/local/bin/plantuml")
		(plantuml-jar-path "/usr/local/opt/plantuml/libexec/plantuml.jar")
		(org-plantuml-jar-path "/usr/local/opt/plantuml/libexec/plantuml.jar"))
#+end_src
** Graphviz
#+begin_src emacs-lisp
  (use-package graphviz-dot-mode
		:load-path "site-lisp/graphviz-dot-mode"
    :custom
     (graphviz-dot-indent-width 2 "set indent size to 2")
     (graphviz-dot-dot-program "/usr/local/bin/dot" "Path to dot executable"))
#+end_src
** OpenAPI
#+begin_src emacs-lisp
	(use-package openapi-mode
		:load-path "site-lisp/openapi-mode"
		:config
		(require 'swagger-mode)
		(require 'openapi-mode))
#+end_src
** XPath query & XML format with XMLStarlet
#+begin_src emacs-lisp
	(use-package xmlstarlet-mode
		:load-path "site-lisp/xmlstarlet-mode"
		:config
		(require 'xmlstarlet-mode))
#+end_src
** Git modes
#+begin_src emacs-lisp
	(use-package git-commit
		:load-path "site-lisp/git-commit-mode")

	(use-package git-modes
		:load-path "site-lisp/git-modes")
#+end_src
* Color Theme
** +Zenburn+
#+begin_example emacs-lisp
	(use-package zenburn-theme
		:ensure t
		:init
		;; pop the icomplete selected item :D
		(custom-set-faces
		 '(icomplete-selected-match ((t (:background "dark cyan")))))
		:config
		(load-theme 'zenburn t)
		)
#+end_example
** +Set Font+
#+begin_example emacs-lisp
	(custom-set-faces
	 ;; custom-set-faces was added by Custom.
	 ;; If you edit it by hand, you could mess it up, so be careful.
	 ;; Your init file should contain only one such instance.
	 ;; If there is more than one, they won't work right.
	 '(default ((t (:family "Inconsolata" :foundry "outline" :slant normal :weight normal :height 180 :width normal)))))
#+end_example
From https://www.emacswiki.org/emacs/SetFonts
#+begin_src emacs-lisp
	(when (eq system-type 'darwin)

		 ;; default Latin font (e.g. Consolas)
		 (set-face-attribute 'default nil :family "Fira Code")

		 ;; default font size (point * 10)
		 ;;
		 ;; WARNING!  Depending on the default font,
		 ;; if the size is not supported very well, the frame will be clipped
		 ;; so that the beginning of the buffer may not be visible correctly.
		 (set-face-attribute 'default nil :height 160)

		 ;; use specific font for Korean charset.
		 ;; if you want to use different font size for specific charset,
		 ;; add :size POINT-SIZE in the font-spec.
		 ;(set-fontset-font t 'hangul (font-spec :name "NanumGothicCoding"))

		 ;; you may want to add different for other charset in this way.
		 )
#+end_src
* Enable advanced flags
** Case Sensitive replacements
#+begin_src emacs-lisp
  (setq case-replace nil)
#+end_src
** Enable =C-x C-u= to convert region to uppercase
#+begin_src emacs-lisp
  (put 'upcase-region 'disabled nil)
#+end_src
** Enable =C-x C-l= to convert region to lowercase
#+begin_src emacs-lisp
  (put 'downcase-region 'disabled nil)
#+end_src
** Enable narrowing =C-x n n= & widening =C-x n w=
#+begin_src emacs-lisp
	;; `C-x n n` & `C-x n w n`
	(put 'narrow-to-region 'disabled nil)
#+end_src
* Tabs & Indentation
** +Indenting+
Set indentation level to 2 for most used modes
#+begin_example emacs-lisp
  (indent-tab s-mode)
#+end_example
** Basic offset to 2
#+begin_src emacs-lisp
	(setq default-indent-offset 2)
	(defun fc/set-default-indent-offset (var)
		(setq x default-indent-offset))

	(setq offset-vars
				'(
					lisp-indent-offset
					css-indent-offset
					groovy-indent-offset
					js-indent-level
					jsx-indent-level
					opa-js-indent-level
					perl-indent-level
					python-indent
					python-indent-offset
					sh-basic-offset
					sh-indentation
					standard-indent
					tab-width
					typescript-indent-level
					web-mode-markup-indent-offset ; HTML element offset indentation
					web-mode-css-indent-offset ; CSS offset indentation
					web-mode-code-indent-offset ; Script/code offset indentation (for JavaScript, Java, PHP, Ruby, VBScript, Python, etc.)
					)
				)
	;; set for all the variables
	(mapc #'fc/set-default-indent-offset offset-vars)
#+end_src
* Saving Abbreviations
- Emacs Lisp abbreviations from https://github.com/malabarba/speed-of-thought-lisp
#+begin_src emacs-lisp
	(setq abbrev-file-name
				(expand-file-name "~/.emacs.d/abbrev_defs"))
	;; do not prompt to save abbreivations
	(setq save-abbrevs 'silently)
	;; enable for the following modes
	(let ((abbrev-modes '(org plantuml emacs-lisp)))
		(mapc (lambda (name)
						(add-hook (intern (concat (symbol-name name) "-mode-hook")) #'abbrev-mode))
					abbrev-modes))
	;; `M-x ea' to edit abbreivations
	(defalias 'ea #'edit-abbrevs "Edit abbreviations")
#+end_src
* Server
#+begin_src emacs-lisp
	;; start the server !!
	(load "server")
	(setq server-socket-dir "~/.emacs.d/server")
	(server-start)
	(unless (server-running-p) (server-start))
	(message "started server")
#+end_src
* Org Mode
#+begin_src emacs-lisp
	(setq org-confirm-babel-evaluate nil)
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '((js . t)))

	(add-to-list 'org-structure-template-alist '("x" . "src emacs-lisp") t)
#+end_src
** Install htmlize from elpa
#+begin_src emacs-lisp
	(use-package htmlize
		:ensure t)
#+end_src
** Always open files in emacs
From [[https://eshelyaron.com/esy.html#org-file-apps-t-emacs][Always open files with C-c C-o inside Emacs]]
#+begin_src emacs-lisp
	(setq org-file-apps '((t . emacs)))
#+end_src
** Allow elisp evaluation
#+begin_src emacs-lisp
	;; allow elisp evaluation in org files
	(defun org-babel-allow-elisp (lang body)
		(not (string= lang "emacs-lisp")))
	(setq org-confirm-babel-evaluate #'org-babel-allow-elisp)
#+end_src
** Keybindings for killing src blocks
#+begin_src emacs-lisp
	(defun org-block-at-point ()
		"Block at point"
		(let ((case-fold-search t))
			(org-between-regexps-p "^[ \t]*#\\+begin_.*"
														 "^[ \t]*#\\+end_.*")))

	(defun org-kill-block ()
		"Kill current block."
		(interactive)
		(if-let ((blockp (org-block-at-point)))
				(kill-region (car blockp) (cdr blockp))
			(user-error "Not in a block")))

	(defun org-copy-block ()
		"Copy current block."
		(interactive)
		(if-let ((blockp (org-block-at-point)))
				(kill-ring-save (car blockp) (cdr blockp))
			(user-error "Not in a block")))

	(define-key org-mode-map (kbd "C-c C-v C-w") #'org-kill-block)
	(define-key org-mode-map (kbd "C-c C-v M-w") #'org-copy-block)
#+end_src
** org-capture templates
#+begin_src emacs-lisp
	(defun add-daily-note ()
		"Find heading to add daily note"
		(goto-char (point-max))
		(let ((ts (format-time-string "[%Y-%m-%d %a]"))
					(tl (org-find-top-headline)))
			;; create heading if it does not exist
			(unless (string= ts tl)
				(unless (bolp) (insert "\n"))
				(insert "* " ts "\n"))
			(unless (bolp) (insert "\n"))))

	(global-remap-key "C-x x" #'org-capture)
	;(global-set-key (kbd "C-x c") #'org-capture)

	(defun add-daily-note-capture (filename)
		(add-to-list 'org-capture-templates
								 `("n" "Daily notes item" plain
									 (file+function ,filename add-daily-note)
									 "** %^{Title}\n%?" :jump-to-captured t)))

	(defun add-note-capture (filename)
		(add-to-list 'org-capture-templates
								 `("b" "Buf note item" entry
									 (file ,filename)
									 "* %?" :jump-to-captured t)))
	;; set variable to nil otherwise will get the following error
	;; Symbol's value as variable is void: org-capture-templates
	(setq org-capture-templates nil)
#+end_src
** Disable archive keybindings
#+begin_src emacs-lisp
	(keymap-unset org-mode-map "C-c $" t)
	(keymap-unset org-mode-map "C-c C-<tab>" t)
#+end_src
* Utility Functions
** Recreate scratch buffer
#+begin_src emacs-lisp
	;; recreate scratch buffer
	(defun fc/create-scratch-buffer ()
		"Create a scratch buffer if one does not already exist"
		(interactive)
		(let ((buffer-name "*scratch*"))
			(unless (get-buffer buffer-name)
				(with-current-buffer (get-buffer-create buffer-name)
					(insert (string-join
									 '(";; This buffer is for text that is not saved, and for Lisp evaluation."
										 ";; To create a file, visit it with C-x C-f and enter text in its buffer."
										 ";; Use C-x C-e to eval expressing and C-j to eval and print\n\n"
										 )
									 "\n"))
					(lisp-interaction-mode))
				)
			(switch-to-buffer buffer-name)
			)
		)
	(defalias
		'create-scratch-buffer
		'fc/create-scratch-buffer
		"Alias namespaced function to an non-namespaced name")
#+end_src
** Untabify buffer
From [[http://stackoverflow.com/questions/318553/getting-emacs-to-untabify-when-saving-certain-file-types-and-only-those-file-ty][Untabify certain filetypes in Emacs]]
#+begin_src emacs-lisp
	(defun fc/untabify-buffer ()
		"Untabify current buffer"
		(interactive)
		(untabify (point-min) (point-max)))
	(defalias
		'untabify-buffer
		'fc/untabify-buffer
		"Alias namespaced function to an non-namespaced name")
#+end_src
** Unhexify
#+begin_src emacs-lisp
	(defun fc/unhexify (color)
		(map
		 'list
		 (lambda (x) (string-to-number x 16))
		 (split-string
			(replace-regexp-in-string
			 "#\\([0-9A-Fa-f]\\{2\\}\\)\\([0-9A-Fa-f]\\{2\\}\\)\\([0-9A-Fa-f]\\{2\\}\\)"
			 "\\1-\\2-\\3"
			 color) "-")
		 )
		)
	(defalias
		'unhexify
		'fc/unhexify
		"Alias namespaced function to an non-namespaced name")
#+end_src
** Camelcase
#+begin_src emacs-lisp
	;;;###autoload
	(defun fc/camel-case (input &optional upper)
		"Convert INPUT to camel case string. If UPPER is passed then the
	first word is capitalized"
		(let ((parts (split-string input "[ \f\t\n\r\v_-]+")))
			(let ((first-word-transformer (if upper #'capitalize #'downcase)))
				(mapconcat
				 'identity
				 (cons (funcall first-word-transformer (car parts))
							 (mapcar 'capitalize (cdr parts)))
				 "")
				)
			)
		)
	(defalias
		'camel-case
		'fc/camel-case
		"Alias namespaced function to an non-namespaced name")
#+end_src
** Align Declarations
#+begin_src emacs-lisp
	(fset 'align-decl
				(lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([134217848 97 108 105 103 110 45 114 101 103 101 120 112 return 61 return 24 24 134217848 114 101 112 108 97 99 101 45 114 101 103 101 120 112 return 92 40 91 94 32 6 43 92 41 92 40 32 43 92 41 32 61 return 92 50 92 49 32 61 return] 0 "%d")) arg)))
#+end_src
** dos2unix
#+begin_src emacs-lisp
	(fset 'dos2unix
		 (lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([201326629 17 13 return return 33] 0 "%d")) arg)))
#+end_src
** base64 url encode & decode
From https://gist.github.com/inouetmhr/4116307
#+begin_src emacs-lisp
	(defun fc/base64-to-base64url (str)
		(setq str (replace-regexp-in-string "=+$" "" str))
		(setq str (replace-regexp-in-string "+" "-" str))
		(setq str (replace-regexp-in-string "/" "_" str)))

	(defun fc/base64url-to-base64 (str)
		(setq str (replace-regexp-in-string "-" "+" str))
		(setq str (replace-regexp-in-string "_" "/" str))
		(let ((mod (% (length str) 4)))
			(cond
			 ((= mod 1) (concat str "==="))
			 ((= mod 2) (concat str "=="))
			 ((= mod 3) (concat str "="))
			 (t str))))

	(defun fc/base64url-encode-string (str)
		(base64-to-base64url (base64-encode-string str t)))

	(defun fc/base64url-decode-string (str)
		(base64-decode-string (base64url-to-base64 str)))

#+end_src
** Toggle proxy
#+begin_src emacs-lisp
	(defun fc/toggle-proxy (&optional force)
		"Toggle proxy settings for emacs"
		(interactive)
		(if (or force (file-exists-p "~/.proxy.lock"))
				(progn
					(setq url-using-proxy t
								url-proxy-services
								'(("no_proxy" . "localhost")
									("http" . "localhost:3128")
									("https" . "localhost:3128")))
					(setenv "http_proxy" "http://localhost:3128")
					(setenv "https_proxy" "http://localhost:3128")
					(setenv "no_proxy" "localhost")
					(message "Proxy enabled")
					)
			(progn
				(setq url-using-proxy nil
							url-proxy-services nil)
				(setenv "http_proxy" nil)
				(setenv "https_proxy" nil)
				(setenv "no_proxy" nil)
				(message "Proxy disabled")
				)
			)
		)
#+end_src
* File Mode Specific
** Ruby mode for Vagrantfile
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("Vagrantfile$" . ruby-mode))
#+end_src
** SQL
Setup sql-mode to highlight sql keywords
#+begin_src emacs-lisp
	(add-hook 'sql-mode-hook
						(lambda () (sql-highlight-ansi-keywords)))
#+end_src
** Java
Force indents, offsets and disable tabs
#+begin_src emacs-lisp
  (add-hook 'java-mode-hook
            (lambda ()
              (setq c-basic-offset 2
                    tab-width 2
                    indent-tabs-mode nil)))
#+end_src
** Untabify files using prog mode hooks
#+begin_src emacs-lisp
	(defun fc/progmodes-hooks ()
		"Hooks for programming modes"
		(add-hook 'before-save-hook #'fc/progmodes-write-hooks)
		(message (format "Adding save hook for %s" major-mode)))

	(defun fc/progmodes-write-hooks ()
		"Hooks which run on file write for programming modes"
		(prog1 nil
			(if (member major-mode (list 'makefile-bsdmake-mode))
					(lambda ()
						(message (format "untabifying buffer %s" major-mode))
						(untabify-buffer)
						)
					(lambda ()
						(message (format "skipping for %s" major-mode)))
					))
		)

	(add-hook 'sh-set-shell-hook #'fc/progmodes-hooks)
	(add-hook 'python-mode-hook #'fc/progmodes-hooks)
	(add-hook 'js-mode-hook #'fc/progmodes-hooks)
#+end_src
** Show whitespace in makefiles
#+begin_src emacs-lisp
	(add-hook 'makefile-bsdmake-mode-hook #'whitespace-mode)
	(add-hook 'makefile-bsdmake-mode-hook
						(lambda ()
							(remove-hook 'sh-set-shell-hook 'progmodes-hooks t)))
	(add-hook 'makefile-bsdmake-mode-hook
						(lambda ()
							(message "removed untabify for makefile")))
#+end_src
** Golang
*** Setup GOPATH and variables for go-mode
#+begin_src emacs-lisp
	(setq go-home "/usr/local/go")
	(setq go-path (expand-file-name "go" (getenv "HOME")))
	(setq godef-command (expand-file-name "bin/godef" go-path))
	(setq gofmt-command (expand-file-name "bin/goimports" go-path))
	(setq godoc-command (expand-file-name "bin/godoc" go-home))
	(setq go-command (expand-file-name "bin/go" go-home))
#+end_src
** Prettify symbols for emacs lisp
#+begin_src emacs-lisp
	(add-hook 'emacs-lisp-mode-hook #'prettify-symbols-mode)
#+end_src
** Insert lambda for elisp
#+begin_src emacs-lisp
	(defun insert-lambda ()
		(interactive)
		(insert "(lambda (")
		(setq p (point))
		(insert "))")
		(goto-char p))

	(keymap-set emacs-lisp-mode-map "C-c C-l" #'insert-lambda)
	(keymap-set lisp-interaction-mode-map "C-c C-l" #'insert-lambda)

	(defun insert-let (prefix)
		(interactive "p")
		(message "insert-let : %d" prefix)
		(insert "(let" (if (>= prefix 4) "*" "") " ((")
		(setq p (point))
		(insert ")))")
		(goto-char p))

	(keymap-set lisp-interaction-mode-map "C-c l" #'insert-let)
	(keymap-set emacs-lisp-mode-map "C-c l" #'insert-let)
#+end_src
* Auto-insert templates
From [[https://www.emacswiki.org/emacs/AutoInsertMode][EmacsWiki: Auto Insert Mode]]
#+begin_src emacs-lisp
	(auto-insert-mode)
	;; Graphviz diagrams
	(define-auto-insert
		'(graphviz-dot-mode . "Graphviz diagram")
		'("Diagram skeleton: "
			"digraph G {\n" "  // " (file-name-base (buffer-file-name)) "\n" > _ "  \n}"))
	;; PlantUML diagrams
	(define-auto-insert
		'(plantuml-mode . "PlantUML diagram")
		'("Diagram skeleton: "
			"@startuml\n" "' " (file-name-base (buffer-file-name)) "\n" > _ "\n@enduml"))

	;; Org mode
	(define-auto-insert
		'(org-mode . "Org file")
		'("Org file skeleton: "
			"#+title: " (capitalize (file-name-base (buffer-file-name))) "\n"
			"#+author: " user-login-name " <" (string-trim (shell-command-to-string "git config user.email")) ">\n"
			"# -*- org-export-use-babel: nil; -*-\n"
			"#+options:  num:nil broken-links:mark\n"
			"#+property: header-args :eval never-export\n"
			"#+startup: overview hideblocks\n"
			"#+html_head: <link rel=\"stylesheet\" href=\""
			(file-relative-name
			 (expand-file-name "org-includes/org.css" macbook-home) default-directory)
			"\"></link>\n"
			"#+html_head: <link rel=\"stylesheet\" href=\""
			(file-relative-name
			 (expand-file-name "org-includes/slideshow.css" macbook-home) default-directory)
			"\"></link>\n"
			"#+html_head: <script src=\""
			(file-relative-name
			 (expand-file-name "org-includes/org.js" macbook-home) default-directory)
			"\"></script>\n"
			"#+html_head: <script src=\""
			(file-relative-name
			 (expand-file-name "org-includes/slideshow.js" macbook-home) default-directory)
			"\"></script>\n"
			"* " > _
			))
#+end_src
* Global key bindings
#+begin_src emacs-lisp
	;(global-set-key (kbd "C-c C-d") 'calendar)
	;(global-unset-key (kbd "C-c C-d"))
#+end_src
* Proxy
#+begin_src emacs-lisp
	;; toggle proxy
	(fc/toggle-proxy)
#+end_src
* Mode customizations
** Highlight elisp functions
#+begin_src emacs-lisp
	(font-lock-add-keywords
	 'emacs-lisp-mode
	 '(("#'[[:word:]-/]+\\>" . font-lock-function-name-face)))
#+end_src
* Open links in firefox
#+begin_src emacs-lisp
	;; open links in firefox
	(setq
	 browse-url-browser-function 'browse-url-firefox
	 browse-url-firefox-program "/Applications/Firefox.app/Contents/MacOS/firefox")
#+end_src
* Get active tab in firefox as org link
Find current profile directory from [[elisp:(browse-url-firefox "about:profiles")][about:profiles]]
#+begin_src emacs-lisp
	(defun ff-link-org ()
		(interactive)
		(insert
		 (shell-command-to-string
			(string-join
			 '("lz4jsoncat \"$FIREFOX_PROFILE/sessionstore-backups/recovery.jsonlz4\""
				 "jq -r '.windows[0].tabs | sort_by(.lastAccessed)[-1] | .entries[.index-1] | \"[[\" + (.url) + \"][\" + (.title) + \"]]\"'"
				 "tr -d '\n'")
			 " | ")))
		)
	(define-key org-mode-map (kbd "C-c i f") 'ff-link-org)
#+end_src
* Do not save .el.gz buffers
Exclude ~.el.gz~ buffers when saving the desktop
#+begin_src emacs-lisp
	(setq desktop-files-not-to-save
				(rx (group (or
					(seq bos "/" (* (not (any "/:"))) ":")
					(seq "(ftp)" eos)
					(seq ".el.gz" eos)))))
#+end_src
* Keybinding to evaluate elisp buffer
#+begin_src emacs-lisp
	(defun eval-last-sexp-yank ()
		(interactive)
		(let ((sexp (thing-at-point 'sexp t)) (p))
			(kill-new
			 (with-temp-buffer
				 (insert sexp)
				 (setq p (point))
				 (eval-last-sexp t)
				 (buffer-substring-no-properties p (point-max))))))

	;; C-c C-e already does it !!
	(defun eval-buffer-notify ()
		(interactive)
		(eval-buffer)
		(message "Evaluated buffer: %s"
						 (propertize (buffer-name (current-buffer)) 'face 'font-lock-function-name-face)))

	(dolist (mode-map (mapcar #'symbol-value '(emacs-lisp-mode-map lisp-interaction-mode-map)))
		(keymap-set mode-map "C-x C-w" #'eval-last-sexp-yank)
		(keymap-set mode-map "C-c C-p" #'pp-eval-last-sexp))

#+end_src
* Toggle between default browser & firefox
#+begin_src emacs-lisp
	(defun toggle-browser ()
		"Toggle between default browser and firefox"
		(interactive)
		(setq  browse-url-browser-function
					 (if (eql browse-url-browser-function 'browse-url-default-browser)
							 'browse-url-firefox
						 'browse-url-default-browser))
		(message (if (eql browse-url-browser-function 'browse-url-default-browser)
								 "Using default browser"
							 "Using firefox")))
	(defalias 'tb #'toggle-browser "Short alias for toggle browser")
#+end_src
* Generate email content from interview notes
#+begin_src emacs-lisp
	(defun interview-email ()
		"Generate email content from interview notes in org mode"
		(interactive)
		(save-excursion
			(let* ((el (org-element-at-point))
						 (pl (cadr el))
						 (pel (plist-get  pl :parent)))
				(if (and
						 (eq 'headline (org-element-type el))
						 (string= "Interviews" (plist-get (cadr pel) :raw-value)))
						(let* ((content
										(buffer-substring-no-properties
										 (plist-get pl :contents-begin)
										 (plist-get pl :contents-end)))
									 (fn (make-temp-file "org-export" nil ".html")))
							(with-temp-buffer
								(insert "#+EXPORT_FILE_NAME: " fn "\n")
								(insert "#+html: <!doctype html>\n\n")
								(insert "#+html: <style> body {font-family: sans-serif; font-size: 12pt;}</style>\n\n")
								(insert "Hi,\n\nPlease find below my observations from my discussion with ")
								(insert "*" (plist-get pl :raw-value) "*\n\n")
								(insert content)
								(goto-char (point-min))
								(when (re-search-forward (rx bol "**** noexport") nil t)
									(delete-region (match-beginning 0) (point-max))
									(forward-line -2))
								(when (re-search-forward (rx bol "- " (group (? "Not ") "Recommended")) nil t)
									(replace-match "- *\\1*"))
								(goto-char (point-max))
								(insert "\n\nRegards,\n\nShyam")
								(org-html-export-to-html nil nil nil t nil)
								(browse-url fn)))
					(user-error "Not under an \"Interviews\" heading")))))

	(define-key org-mode-map (kbd "C-c o") #'interview-email)
#+end_src
* Copy buffer name & path
#+begin_src emacs-lisp
	(defun copy-buffer-name ()
		(interactive)
		(kill-new (buffer-name)))

	(defalias 'cbn #'copy-buffer-name "copy buffer name")

	(defun copy-buffer-path ()
		(interactive)
		(when (buffer-file-name)
			(kill-new (buffer-file-name))))

	(defalias 'cbp #'copy-buffer-path "copy buffer file path")

	(defun scratch-with-this-buffer ()
		"Insert `with-current-buffer' snippet with the current buffer"
		(interactive)
		(let ((bn (buffer-name)))
			(with-current-buffer "*scratch*"
				(goto-char (point-max))
				(unless (bolp) (insert "\n"))
				(insert "(with-current-buffer \"" bn "\"\n\t")
				(setq p (point))
				(insert ") ")
				(switch-to-buffer (current-buffer))
				(goto-char p))))

	(defalias 'wcb #'scratch-with-this-buffer "Scratch with this buffer")
#+end_src
* shorthand for [[elisp:(describe-function #'revert-buffer-quick)][revert-buffer-quick]]
#+begin_src emacs-lisp
	(defalias 'rb #'revert-buffer-quick "Quick revert buffer")
#+end_src
* Skip marking certain special buffers
#+begin_src emacs-lisp
	(defvar ibuffer-ignore-special-buffers-alist
		'("*scratch*" "*Messages*" "*temp*")
		"List of special buffers to skip")

	(require 'ibuf-ext)											; for `ibuffer-mark-on-buffer'
	(defun ibuffer-mark-special-buffers-with-ignores ()
		(interactive)
		(ibuffer-mark-on-buffer
		 (lambda (buf) (and (string-match "^\\*.+\\*$" (buffer-name buf))
									 (not (member
												 (buffer-name buf)
												 ibuffer-ignore-special-buffers-alist))))))

	(defalias 'ibuffer-mark-special-buffers
		#'ibuffer-mark-special-buffers-with-ignores
		"Do not mark special buffers specified by
	`ibuffer-ignore-special-buffers-alist'")
#+end_src
* Quote selected lines
#+begin_src emacs-lisp
	(defun quote-string (s)
		"Quote string by escaping `\"' with `\\\"'"
		(concat
		 "\""
		 (string-replace "\"" "\\\"" s)
		 "\""))

	(defun quote-lines-in-region (start end)
		"Quote all lines in the region"
		(interactive "r")
		(when (use-region-p)
			(let ((s (buffer-substring-no-properties start end)))
				(delete-region start end)
				(insert (mapconcat
								 #'quote-string
								 (seq-filter
									(lambda (s) (> (length s) 0))
									(split-string s "\n"))
								 "\n"))
				(when (string-suffix-p "\n" s)
					(insert "\n")))))

	(keymap-global-set "C-c \"" #'quote-lines-in-region)
#+end_src
* Extras
#+begin_src emacs-lisp
	;; load interview csv
	(require 'interview-csv)

	;; load org-insert-image
	(require 'org-insert-image)

	;; load org-insert-slideshow
	(require 'org-insert-slideshow)

	;; temp-buffer
	(require 'temp-buffer)

	;; project-notes
	(require 'project-notes)
#+end_src
* Finally
Also use =M-x emacs-init-time= to find out how long emacs took to load
#+begin_src emacs-lisp
	(run-with-idle-timer 2 nil #'set-emacs-gc-threshold original-gc-cons-threshold)
	(message "Loaded all from emacs.org")
#+end_src
